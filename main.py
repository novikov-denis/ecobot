import os
import time
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ParseMode, ChatAction, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler, CallbackQueryHandler
import re
import json
import logging

# –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_IDS = list(map(int, os.getenv('ADMIN_IDS').split(',')))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
if not TOKEN or not ADMIN_IDS:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å TELEGRAM_TOKEN –∏ ADMIN_IDS –≤ —Ñ–∞–π–ª–µ .env")

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
USER_DATA_FILE = 'user_data.json'
PHOTO_PATH = 'ekolina.jpg'

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
ASK_NAME, ASK_FACULTY, ASK_GROUP, ASK_QUESTION, LAB1_OBJECT, LAB1_BENEFIT1, LAB1_BENEFIT2, LAB1_BENEFIT3, LAB1_CONFIRM, LAB1_CHANGE = range(10)

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserDataManager:
    def __init__(self, file_path):
        self.file_path = file_path
        self.user_data = self.load_user_data()

    def load_user_data(self):
        if os.path.exists(self.file_path):
            with open(self.file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}

    def save_user_data(self):
        with open(self.file_path, 'w', encoding='utf-8') as f:
            json.dump(self.user_data, f, ensure_ascii=False, indent=4)

    def get_user_data(self, user_id):
        return self.user_data.get(str(user_id), {})

    def update_user_data(self, user_id, data):
        self.user_data[str(user_id)] = data
        self.save_user_data()

user_data_manager = UserDataManager(USER_DATA_FILE)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –§–ò–û
def check_full_name(full_name):
    pattern = r'^[–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+$'
    return re.match(pattern, full_name)

# –ù–∞—á–∞–ª–æ –æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def start(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    if str(user_id) in user_data_manager.user_data:
        update.message.reply_text("–ò—Ç–∞–∫, —á–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å? üê≠")
        show_main_menu(update)
        return ConversationHandler.END

    greeting_text = (
        "<b>–ü—Ä–∏–≤–µ—Ç</b> üëã\n\n"
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç –≠–∫–æ–ª–∏–Ω–∞. –Ø –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ —ç–∫–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –ò–¢–ú–û. "
        "–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è ü§©\n"
        "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ."
    )
    context.bot.send_photo(chat_id=update.effective_chat.id, photo=open(PHOTO_PATH, 'rb'), caption=greeting_text, parse_mode=ParseMode.HTML)
    return ASK_NAME

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def ask_name(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    name = update.message.text

    if check_full_name(name):
        user_data = user_data_manager.get_user_data(user_id)
        user_data['name'] = name
        user_data_manager.update_user_data(user_id, user_data)
        update.message.reply_text("<b>–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è</b> üòä –ê —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç üëá", parse_mode=ParseMode.HTML)
        return ASK_FACULTY
    else:
        update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á.", parse_mode=ParseMode.HTML)
        return ASK_NAME

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def ask_faculty(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    faculty = update.message.text

    user_data = user_data_manager.get_user_data(user_id)
    user_data['faculty'] = faculty
    user_data_manager.update_user_data(user_id, user_data)
    update.message.reply_text("<b>–ö–ª–∞—Å—Å</b> üëç –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä G4150 üëá", parse_mode=ParseMode.HTML)
    return ASK_GROUP

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def ask_group(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    group = update.message.text

    user_data = user_data_manager.get_user_data(user_id)
    user_data['group'] = group
    user_data_manager.update_user_data(user_id, user_data)
    update.message.reply_text("–ò—Ç–∞–∫, —á–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å? üê≠", parse_mode=ParseMode.HTML)
    show_main_menu(update)
    return ConversationHandler.END

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def show_main_menu(update: Update):
    reply_markup = ReplyKeyboardMarkup([
        [KeyboardButton('üîé –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å')],
        [KeyboardButton('üî¨ –ü–æ–º–æ—á—å —Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–º–∏')]
    ], resize_keyboard=True)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup, parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"
def ask_question(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("–ó–∞–¥–∞–≤–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∞ —è –ø—Ä–æ–ª–∏—Å—Ç–∞—é –≤–µ—Å—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å üîé\n"
                              "*–ú–æ–π –ò–ò –º–æ–∂–µ—Ç –¥–æ–ø—É—Å–∫–∞—Ç—å –æ—à–∏–±–∫–∏, –ø–æ—ç—Ç–æ–º—É —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é*", parse_mode=ParseMode.HTML)
    return ASK_QUESTION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def handle_question(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode=ParseMode.HTML)
    show_main_menu(update)
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—á—å —Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–º–∏"
def handle_lab_work(update: Update, context: CallbackContext):
    update.message.reply_text("<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç</b> üôÇ", parse_mode=ParseMode.HTML)
    update.message.reply_text("–ó–¥–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç—Ä–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏—Ö –≤—Å–µ. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ, —è –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç—á–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.", parse_mode=ParseMode.HTML)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. ‚¨áÔ∏è", reply_markup=get_lab_work_keyboard(), parse_mode=ParseMode.HTML)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏
def get_lab_work_keyboard():
    keyboard = [
        [InlineKeyboardButton("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ1", callback_data='lab1')],
        [InlineKeyboardButton("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ2", callback_data='lab2')],
        [InlineKeyboardButton("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ3", callback_data='lab3')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã
def lab_work_selection(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    selected_lab = query.data

    if selected_lab == 'lab1':
        query.edit_message_text(text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ1.", parse_mode=ParseMode.HTML)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π ‚Ññ1
        context.bot.send_chat_action(chat_id=query.message.chat_id, action=ChatAction.TYPING)
        time.sleep(1.5)
        context.bot.send_photo(chat_id=query.message.chat_id, photo='https://drive.google.com/uc?export=view&id=1zv_PACb5zO436uyR-wsA2-ldezXgjy_A', caption="–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ–≥–æ –≤–∫–ª–∞–¥–∞ –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∑–∞—Ö–æ—Ä–∞–Ω–∏–≤–∞–µ–º—ã—Ö –æ—Ç—Ö–æ–¥–æ–≤. –î–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–∞–µ—Ç 3 –ø—É–Ω–∫—Ç–∞:", parse_mode=ParseMode.HTML)

        time.sleep(1.5)
        context.bot.send_chat_action(chat_id=query.message.chat_id, action=ChatAction.TYPING)
        time.sleep(2)
        context.bot.send_message(chat_id=query.message.chat_id, text="1. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª—å–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –í–∞–º–∏ –ª–∏—á–Ω–æ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –ª—é–±–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¢–∞–±–ª–∏—Ü—É 1. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å: –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä—É, –¥–∞—á—É, –æ–±—â–µ–∂–∏—Ç–∏–µ, –∏–ª–∏ –¥–∞–∂–µ –≤–∞—à–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã, –µ—Å–ª–∏ –æ–Ω–æ –∫–æ–Ω–µ—á–Ω–æ —É–∂–µ –µ—Å—Ç—å.\n2. –ò—Å–ø–æ–ª—å–∑—É—è <a href='https://recyclemap.ru/'>https://recyclemap.ru/</a> (–µ—Å–ª–∏ –≤–∞—à –≥–æ—Ä–æ–¥ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–∏—Å–µ) –∏–ª–∏ –¥—Ä—É–≥–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤–∞–º —Ä–µ—Å—É—Ä—Å, –Ω–∞–π–¥–∏—Ç–µ –±–ª–∏–∂–∞–π—à–∏–µ –∫ –≤–∞–º —Ç–æ—á–∫–∏ —Ä–∞–∑–¥–µ–ª—å–Ω–æ–≥–æ —Å–±–æ—Ä–∞. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¢–∞–±–ª–∏—Ü—É 2, —É–∫–∞–∑–∞–≤ —Ç–æ—á–∫–∏ –∏ –≤–∏–¥—ã –æ—Ç—Ö–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ä–∞–∑–¥–µ–ª—è–µ—Ç–µ/—Å–¥–∞–µ—Ç–µ –∏–ª–∏ –º–æ–≥–ª–∏ –±—ã —ç—Ç–æ –¥–µ–ª–∞—Ç—å –≤ —Å–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ.\n3. –£–∂–µ –∑–Ω–∞—è —Å–æ—Å—Ç–∞–≤ —Å–≤–æ–µ–π –º—É—Å–æ—Ä–Ω–æ–π –∫–æ—Ä–∑–∏–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—è—Ç—å –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ (5R), –∫–æ—Ç–æ—Ä—ã–µ –ª–µ–∂–∞—Ç –≤ –æ—Å–Ω–æ–≤–µ –±–µ–∑–æ—Ç—Ö–æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É 3. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫ –≤ —Å—Ç–æ–ª–±—Ü–µ ‚Äú–ú–æ–≥—É –¥–µ–ª–∞—Ç—å –≤ –±—É–¥—É—â–µ–º‚Äù, –≤—ã –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ –º–æ–∂–µ—Ç–µ –±–æ–ª—å—à–µ, —á–µ–º –∫–∞–∂–µ—Ç—Å—è.", parse_mode=ParseMode.HTML)

        time.sleep(1.5)
        context.bot.send_chat_action(chat_id=query.message.chat_id, action=ChatAction.TYPING)
        time.sleep(2)
        context.bot.send_photo(chat_id=query.message.chat_id, photo='https://drive.google.com/uc?export=view&id=1Ua7RYLVDSdQYfpViCqn8Ok8AqD1syteQ', caption="–ù–∞—á–Ω–µ–º —Å —Ç–∞–±–ª–∏—Ü—ã ‚Ññ 1 ‚Äì –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª—å–Ω–æ–≥–æ —Å–±–æ—Ä–∞.", parse_mode=ParseMode.HTML)

        time.sleep(1.5)
        context.bot.send_chat_action(chat_id=query.message.chat_id, action=ChatAction.TYPING)
        time.sleep(2)
        context.bot.send_message(chat_id=query.message.chat_id, text="–£–∫–∞–∂–∏—Ç–µ <b>–æ–±—ä–µ–∫—Ç</b>, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –±—É–¥–µ—Ç–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", parse_mode=ParseMode.HTML)
        return LAB1_OBJECT
    elif selected_lab == 'lab2':
        query.edit_message_text(text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ2.", parse_mode=ParseMode.HTML)
        show_main_menu(query.message)
    elif selected_lab == 'lab3':
        query.edit_message_text(text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ3.", parse_mode=ParseMode.HTML)
        show_main_menu(query.message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã ‚Ññ1
def lab1_object(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    user_data = user_data_manager.get_user_data(user_id)
    user_data['lab1_object'] = update.message.text
    user_data_manager.update_user_data(user_id, user_data)

    context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    time.sleep(1.5)
    update.message.reply_text("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É ‚Äì <b>–ö–∞–∫–∏–µ –≤—ã–≥–æ–¥—ã (—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ, —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ) –≤—ã –∏ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä—è —Ä–∞–∑–¥–µ–ª—å–Ω–æ–º—É —Å–±–æ—Ä—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ?</b>\n–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç –∏–∑ —Ç—Ä–µ—Ö üëá", parse_mode=ParseMode.HTML)
    return LAB1_BENEFIT1

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –≤—ã–≥–æ–¥—ã –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã ‚Ññ1
def lab1_benefit1(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    user_data = user_data_manager.get_user_data(user_id)
    user_data['lab1_benefit1'] = update.message.text
    user_data_manager.update_user_data(user_id, user_data)

    context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    time.sleep(1.5)
    update.message.reply_text("–•–æ—Ä–æ—à–æ üëå –£–∫–∞–∂–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç –∏–∑ —Ç—Ä–µ—Ö üëá", parse_mode=ParseMode.HTML)
    return LAB1_BENEFIT2

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –≤—ã–≥–æ–¥—ã –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã ‚Ññ1
def lab1_benefit2(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    user_data = user_data_manager.get_user_data(user_id)
    user_data['lab1_benefit2'] = update.message.text
    user_data_manager.update_user_data(user_id, user_data)

    context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    time.sleep(1.5)
    update.message.reply_text("–°—É–ø–µ—Ä üëç –£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ—Ç–∏–π –ø—É–Ω–∫—Ç üëá", parse_mode=ParseMode.HTML)
    return LAB1_BENEFIT3

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ –ø—É–Ω–∫—Ç–∞ –≤—ã–≥–æ–¥—ã –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã ‚Ññ1
def lab1_benefit3(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    user_data = user_data_manager.get_user_data(user_id)
    user_data['lab1_benefit3'] = update.message.text
    user_data_manager.update_user_data(user_id, user_data)

    context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    time.sleep(1.5)
    benefits = (
        f"<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
        f"–ü—É–Ω–∫—Ç 1: {user_data['lab1_benefit1']}\n"
        f"–ü—É–Ω–∫—Ç 2: {user_data['lab1_benefit2']}\n"
        f"–ü—É–Ω–∫—Ç 3: {user_data['lab1_benefit3']}\n"
        f"–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ?"
    )
    buttons = [
        [InlineKeyboardButton("–î–∞", callback_data='confirm_yes')],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data='confirm_no')],
        [InlineKeyboardButton("–•–æ—á—É –¥–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç", callback_data='confirm_add')]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)
    update.message.reply_text(benefits, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    return LAB1_CONFIRM

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
def lab1_confirm(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    user_id = query.message.chat_id
    user_data = user_data_manager.get_user_data(user_id)

    if query.data == 'confirm_yes':
        query.edit_message_text(text="–û—Ç–ª–∏—á–Ω–æ! –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ1 –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", parse_mode=ParseMode.HTML)
        show_main_menu(query.message)
        return ConversationHandler.END
    elif query.data == 'confirm_no':
        query.edit_message_text(text="–ö–∞–∫–æ–π –ø—É–Ω–∫—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ (1, 2 –∏–ª–∏ 3):", parse_mode=ParseMode.HTML)
        return LAB1_CHANGE
    elif query.data == 'confirm_add':
        query.edit_message_text(text="–î–æ–±–∞–≤—å—Ç–µ –µ—â–µ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç:", parse_mode=ParseMode.HTML)
        return LAB1_BENEFIT1

def handle_lab1_confirm_change(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    user_data = user_data_manager.get_user_data(user_id)
    change_point = update.message.text.strip()

    if change_point == '1':
        update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç 1:", parse_mode=ParseMode.HTML)
        context.user_data['lab1_edit'] = 'lab1_benefit1'
        return LAB1_BENEFIT1
    elif change_point == '2':
        update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç 2:", parse_mode=ParseMode.HTML)
        context.user_data['lab1_edit'] = 'lab1_benefit2'
        return LAB1_BENEFIT2
    elif change_point == '3':
        update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç 3:", parse_mode=ParseMode.HTML)
        context.user_data['lab1_edit'] = 'lab1_benefit3'
        return LAB1_BENEFIT3

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def send_notifications(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        update.message.reply_text("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.", parse_mode=ParseMode.HTML)
        return

    context.bot.send_message(chat_id=update.effective_chat.id, text="–ß—Ç–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.", parse_mode=ParseMode.HTML)
    context.user_data['awaiting_notification'] = True

def handle_notification(update: Update, context: CallbackContext):
    if context.user_data.get('awaiting_notification'):
        notification_content = update.message.caption if update.message.caption else update.message.text
        photo_file_id = update.message.photo[-1].file_id if update.message.photo else None
        sent_count = 0

        for user_id in user_data_manager.user_data.keys():
            if int(user_id) not in ADMIN_IDS:
                if photo_file_id:
                    context.bot.send_photo(chat_id=int(user_id), photo=photo_file_id, caption=notification_content, parse_mode=ParseMode.HTML)
                elif notification_content:
                    context.bot.send_message(chat_id=int(user_id), text=notification_content, parse_mode=ParseMode.HTML)
                sent_count += 1

        context.user_data['awaiting_notification'] = False
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
def error_handler(update: Update, context: CallbackContext):
    logger.error(msg="Exception while handling an update:", exc_info=context.error)
    update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.', parse_mode=ParseMode.HTML)

def main():
    updater = Updater(TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            ASK_NAME: [MessageHandler(Filters.text & ~Filters.command, ask_name)],
            ASK_FACULTY: [MessageHandler(Filters.text & ~Filters.command, ask_faculty)],
            ASK_GROUP: [MessageHandler(Filters.text & ~Filters.command, ask_group)],
            ASK_QUESTION: [MessageHandler(Filters.text & ~Filters.command, handle_question)],
            LAB1_OBJECT: [MessageHandler(Filters.text & ~Filters.command, lab1_object)],
            LAB1_BENEFIT1: [MessageHandler(Filters.text & ~Filters.command, lab1_benefit1)],
            LAB1_BENEFIT2: [MessageHandler(Filters.text & ~Filters.command, lab1_benefit2)],
            LAB1_BENEFIT3: [MessageHandler(Filters.text & ~Filters.command, lab1_benefit3)],
            LAB1_CONFIRM: [
                CallbackQueryHandler(lab1_confirm, pattern='confirm_yes|confirm_no|confirm_add')
            ],
            LAB1_CHANGE: [MessageHandler(Filters.text & ~Filters.command, handle_lab1_confirm_change)]
        },
        fallbacks=[CommandHandler('start', start)],
        per_message=True  # –î–æ–±–∞–≤–ª—è–µ–º per_message=True
    )
    dispatcher.add_handler(conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    dispatcher.add_handler(MessageHandler(Filters.regex('^üîé –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å$'), ask_question))
    dispatcher.add_handler(MessageHandler(Filters.regex('^üî¨ –ü–æ–º–æ—á—å —Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–º–∏$'), handle_lab_work))
    dispatcher.add_handler(CallbackQueryHandler(lab_work_selection, pattern='^lab[1-3]$'))
    dispatcher.add_handler(CommandHandler('notify', send_notifications))
    dispatcher.add_handler(CommandHandler('stop_notify', handle_notification))
    dispatcher.add_handler(MessageHandler(Filters.text | Filters.photo, handle_notification))
    dispatcher.add_error_handler(error_handler)

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
